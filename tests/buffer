// #ifndef __TUDOU_BUFFER_H__
// #define __TUDOU_BUFFER_H__

// #include <memory>
// #include <stdlib.h>
// #include <string>
// #include <string.h>
// #include <algorithm>
// #include <vector>
// #include <cmath>
// #include "util.h"

// using std::shared_ptr;
// using std::max;
// using std::copy;

// namespace tudou
// {
// class Buffer
// {
// public:
// 	using Ptr = shared_ptr<Buffer>;
// 	static const int InitialSize = 1024;
// 	Buffer()
// 	: _buffer(nullptr)
// 	, _begin(0)
// 	, _end(0)
// 	, _capacity(0)
// 	, _expand(InitialSize)
// 	{}
// 	size_t getBegin() const { return _begin; }
// 	size_t getEnd() const { return _end; }
// 	size_t getExpand() const { return _expand; }
// 	size_t capacity() const { return _capacity; }
// 	size_t size() const { return _end - _begin; }
// 	bool empty() const { return _begin == _end; }
// 	char *data() const { return _buffer + _begin; }
// 	char *end() const { return _buffer + _end; }
// 	char *begin() const { return _buffer + _begin; }
// 	size_t usableSize() const { return _capacity - _end; }
// 	char* expand(size_t len)
// 	{
// 		size_t maxSize = max(_expand, _capacity*2);
// 		char *p = new char[maxSize];
// 		::copy(begin(), end(), p); //原有数据复制到p
// 		delete [] _buffer;
// 		_buffer = p;
// 		_capacity = maxSize;
// 	}
// 	void add(size_t len) { _end += len; }
// 	char *allocate(size_t len) //分配空间
// 	{
// 		if(_end + len <= _capacity)
// 		{
// 			; //不需要分配
// 		}
// 		else if(size() + len < _capacity/2)
// 		{
// 			fill();
// 		}
// 		else
// 		{
// 			expand(len);
// 		}
// 		return end();
// 	}
	
// 	Buffer &append(const char *p, int len)
// 	{
// 		char *s = allocate(len); //end位置加入
// 		add(len); //更新位置
// 		memcpy(s, p, len);
// 		return *this;
// 	}
	
// 	Buffer &consume(size_t len)
// 	{
// 		_begin += len; //取出这么多数据
// 		if(empty())
// 		{
// 			delete [] _buffer;
// 			_begin = _end = _capacity = 0;
// 		}
// 		return *this;
// 	}
// 	Buffer(const Buffer &b) //拷贝构造函数
// 	{ 
// 		if(_buffer)
// 		{
// 			delete _buffer;
// 		}
// 		_buffer = new char[b.capacity()];
		
// 		copyBuf(b);
// 	}
// 	Buffer &operator=(const Buffer &b)
// 	{
// 		if(this == &b)
// 		{
// 			return *this;
// 		}
// 		delete [] _buffer;
// 		_buffer = new char[b.capacity()];
// 		copyBuf(b);
// 		return *this;
// 	}
	
// 	void fill() //向前移动填充
// 	{
// 		::copy(begin(), end(), _buffer);
// 		_end -= _begin;
// 		_begin = 0;
// 	}
	
// 	Buffer &merge(const Buffer &temp)
// 	{
// 		if(&temp == this)
// 		{
// 			return *this;
// 		}
// 		append(temp.begin(), temp.size());
// 		return *this;
// 	}
	
// 	~Buffer()
// 	{
// 		if(_buffer)
// 		{
// 			delete [] _buffer;
// 		}
// 	}
// private:
// 	void copyBuf(const Buffer &b)
// 	{
// 		::copy(b.data(), b.end(), _buffer); //拷贝数据
// 		_begin = b.getBegin();
// 		_end = b.getEnd();
// 		_capacity = b.capacity(); 
// 		_expand = b.getExpand();
// 	}
// private:
// 	char * _buffer;
// 	size_t _begin, _end;
// 	size_t _capacity, _expand;
// };

// }

// #endif