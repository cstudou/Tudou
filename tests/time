#ifndef __TUDOU_TIME_H__
#define __TUDOU_TIME_H__
#include "util.h"
#include "threadgroup.h"
#include <unordered_set>
#include <mutex>
#include <iostream>
#include <functional>

#include <memory>
#include <condition_variable>
#include <list>
#include <unordered_set>
#include <mutex>
#include <functional>
#include <unordered_map>

using namespace std;

namespace tudou
{
const int DELAY_TASK_DEFAULT_TIME = 5;
//延时任务基类
class DelayTaskBase //线程号+callback
{
public:
	uint64_t _id;
	int64_t _dead_time;
	int64_t _dead_line;
	function<bool()> _cb_func;
};

//延时任务类
class DelayTask
{
public:
	bool addDelayTask(uint64_t id, int64_t waitTime, const function<bool()> &callback)
	{
		lock_guard<mutex> lock(_delay_task_mutex);
		shared_ptr<DelayTaskBase> _delay_task_info(new DelayTaskBase()); //存储延时任务信息
		_delay_task_info->_dead_time = waitTime;
		_delay_task_info->_id = id;
		_delay_task_info->_dead_line = getMsec() + waitTime;
		_delay_task_info->_cb_func = callback; //初始化延迟任务基类
		_delay_task_list.emplace(id, _delay_task_info);
		//_cancel_task_list.emplace(id);
		_condition.notify_one(); //有新任务加入
	}
	bool cancelDelayTask(int id)
	{
		_cancel_task_list.erase(id); //取消任务
	}
	bool run() //遍历任务列表
	{
		while(!_is_exit)
		{
			list<shared_ptr<DelayTaskBase>> _task_run;
			unique_lock<mutex> mtx(_delay_task_mutex);
			if(_delay_task_list.size())
			{
				_condition.wait_for(mtx, std::chrono::milliseconds(DELAY_TASK_DEFAULT_TIME));
			}
			else //暂时还没有延时任务就阻塞等待一会
			{
				_condition.wait_for(mtx, std::chrono::minutes(DELAY_TASK_DEFAULT_TIME));
			}
			if(!_delay_task_list.size())
			{
				return false;
			}
			// 遍历列表，看任务到时间没有
			for(auto it = _delay_task_list.begin(); it != _delay_task_list.end();)
			{
				auto &ptr = it->second;
				auto ti = getMsec();
				if(ti >= ptr->_dead_line)
				{
					_cicle_task_list.emplace_back(ptr);
					it = _delay_task_list.erase(it);
					continue;
				}
				++it;
			}
			for(auto it = _cicle_task_list.begin(); it != _cicle_task_list.end(); )
			{
				bool flag = false;
				flag = (*it)->_cb_func();
				if(!flag)
				{
					it = _cicle_task_list.erase(it); //不循环任务
					continue;
				}
				++it;
			}
			
			//std::cout << "size = " << _cicle_task_list.size() << std::endl;
			for(auto it = _cicle_task_list.begin(); it != _cicle_task_list.end(); )
			{
				if(_cancel_task_list.empty() || _cancel_task_list.find((*it)->_id) == _cancel_task_list.end())
				{
					(*it)->_dead_line = getMsec() + (*it)->_dead_time;
					_delay_task_list.emplace((*it)->_id, *it); //循环任务再放进去
				}
				++it;
			}
			//std::cout << "size = " << _delay_task_list.size() << std::endl;
			_cancel_task_list.clear(); //当前没有取消任务
			_cicle_task_list.clear();
		}
	}
	static DelayTask& getInstance(int waitTime=0)
	{
		mutex _mutex;
		if(_pInstance == nullptr)
		{
			lock_guard<mutex> lck(_mutex);
			if(_pInstance == nullptr)
			{
				_pInstance.reset(new DelayTask(waitTime));
			}
		}
		return *_pInstance.get();
	}
	~DelayTask() 
	{
		_is_exit = true;
		_thread_group.joinAll();
	}
private:
	DelayTask(int waitTime)
	: _delay_time(waitTime)
	, _is_exit(false)
	{
		_delay_thread = _thread_group.createThread(bind(&DelayTask::run, this)); //回调函数
		
		_cancel_task_list.clear();
	}
private:
	static std::unique_ptr<DelayTask> _pInstance;
	uint64_t _delay_time;
	atomic<bool> _is_exit;
	mutex _delay_task_mutex;
	condition_variable_any _condition;
	unordered_map<uint64_t, std::shared_ptr<DelayTaskBase>> _delay_task_list;
	unordered_set<uint64_t> _cancel_task_list;
	list<shared_ptr<DelayTaskBase>> _cicle_task_list;
	ThreadGroup _thread_group; 
	thread *_delay_thread;
	
};
std::unique_ptr<DelayTask> DelayTask::_pInstance = nullptr;
	
class Timer
{
public:
	void add(int64_t waitMsec, const function<bool()>&cb)//设置定时器
	{
		//加入定时任务
		DelayTask::getInstance(waitMsec).addDelayTask(reinterpret_cast<uint64_t>(this), waitMsec, cb);
	}
	void cancel()
	{
		DelayTask::getInstance().cancelDelayTask(reinterpret_cast<uint64_t>(this));
	}
	Timer(){}
	~Timer(){};
	
};
	





	
	

}

#endif